{"version":3,"sources":["components/pages/history.js","components/organisms/whoareyou/Whoareyou.js","components/pages/firstpage/Firstpage.js","utils/api/client.js","components/organisms/welcome/Welcome.js","utils/api/greeting.js","components/pages/secondpage/Secondpage.js","components/organisms/notwelcome/NotWelcome.js","components/organisms/header/Antmenu.js","components/organisms/home/Home.js","components/organisms/record/Record.js","components/organisms/graph/Graph.js","components/organisms/calendar/Calendar.js","components/pages/Error/Error.js","components/pages/SelectMenu.js","components/organisms/Footer/Footers.js","components/pages/mainpage/Mainpage.js","components/organisms/home/bloodPressure/BloodpressureMenu.js","utils/api/bloodPressure.js","components/organisms/home/bloodPressure/graph/graph.js","utils/calculate/formatDate.js","components/organisms/home/bloodPressure/history/history.js","utils/calculate/setBloodPressureStatus.js","components/organisms/home/bloodPressure/enroll/enroll.js","components/organisms/home/bloodPressure/bloodpressureslectmenu.js","components/organisms/home/bloodPressure/bloodpressure.js","components/pages/buttonMenu/Bloodpressure.js","components/organisms/home/bloodSugar/Bloodsugarmenu.js","components/organisms/home/bloodSugar/graph/CustomChart.js","components/organisms/home/bloodSugar/graph/CustomChart2.js","components/organisms/home/bloodSugar/graph/CustomChart3.js","utils/api/bloodSugar.js","components/organisms/home/bloodSugar/graph/graph.js","components/organisms/home/bloodSugar/history/history.js","components/organisms/home/bloodSugar/enroll/enroll.js","components/organisms/home/bloodSugar/sugarselectmenu.js","components/organisms/home/bloodSugar/bloodsugar.js","components/pages/buttonMenu/Bloodsugar.js","components/pages/buttonMenu/Exercise.js","components/pages/buttonMenu/Foods.js","components/organisms/home/insulin/insulinMenu.js","components/organisms/home/insulin/graph/CustomChart.js","utils/calculate/countDate.js","utils/api/insulin.js","components/organisms/home/insulin/graph/graph.js","components/organisms/home/insulin/history/history.js","components/organisms/home/insulin/enroll/enroll.js","components/organisms/home/insulin/insulinSelectMenu.js","components/organisms/home/insulin/insulin.js","components/pages/buttonMenu/Insulin.js","components/pages/buttonMenu/Stressandhappy.js","components/pages/buttonMenu/Todayjob.js","components/organisms/home/treatment/medicineEnroll/MedicineEnroll.js","components/organisms/home/treatment/treatmentEnroll/TreatmentEnroll.js","components/organisms/home/treatment/history/History.js","components/organisms/home/treatment/info/Info.js","components/organisms/home/treatment/chubangEnroll/Chubang.js","components/organisms/home/treatment/TreatmentSelectMenu.js","components/organisms/home/treatment/TreatmentMenu.js","components/organisms/home/treatment/Treatment.js","components/pages/buttonMenu/Treatment.js","components/pages/buttonMenu/Weight.js","components/pages/Route.js","App.js","serviceWorker.js","index.js"],"names":["history","Whoareyou","Search","className","src","alt","placeholder","enterButton","size","onSearch","value","push","Firstpage","client","axios","create","baseURL","Welcome","useState","message","setMessage","useEffect","get","then","response","data","result","content","error","timer","setTimeout","clearTimeout","Secondpage","NotWelcome","onClick","Antmenu","func","theme","mode","defaultSelectedKeys","Item","key","Home","Record","Graph","Calendar","Error","SelectMenu","menuIdx","Footers","React","state","setState","title","visible","onCancel","centered","okText","footer","href","target","rel","Header","Footer","Content","Mainpage","setMenuIdx","BloodpressureMenu","props","secondURL","enrollBloodPressure","post","getGraphBloodPressure","startDate","endDate","params","deleteBloodPressure","id","delete","RangePicker","high","setHigh","low","setLow","bpm","setBpm","stTime","setstTime","edTime","setedTime","setData","getData","a","console","log","onChange","e","checked","format","dateString","style","margin","verticalAlign","width","height","top","right","left","bottom","strokeDasharray","dataKey","name","iconSize","type","stroke","activeDot","r","strokeWidth","formatDate","d","year","_d","getFullYear","month","getMonth","date","getDate","formatTime","hours","getHours","minute","getMinutes","seconds","getSeconds","History","start_date","Date","setMonth","end_date","moment","dates","setDates","dataSource","setdataSource","handleDelete","toast","success","filter","item","map","it","today","substring","renderContent","row","index","children","current","pageSize","paginationInfo","setPaginationInfo","columns","dataIndex","render","trueIndex","obj","rowSpan","i","length","lowAvg","highAvg","bpmAvg","value_high","value_low","value_bpm","Math","round","status","high_status","low_status","setBloodPressureStatus","SmileTwoTone","twoToneColor","StatusLight","onConfirm","textAlign","defaultValue","onCalendarChange","bordered","pagination","pageChange","page","rowKey","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","TextArea","enroll","onFinish","time","catch","labelCol","span","wrapperCol","initialValues","offset","rules","required","fontSize","label","noStyle","colon","htmlType","BloodpressureselectMenu","BloodpressureWrapper","Bloodpressure","CustomChart","idx","CustomChart2","CustomChart3","getBloodSugar","when","getBloodSugarHistory","getBloodSugarGraph","whenData","enrollBloodSugar","updateBloodSugar","put","setWhenData","Group","Button","project","Column","ColumnGroup","arr","findIndex","temp","_when","_value","Enroll","useForm","form","dataID","setDataID","isDisable","setDisable","isUpdate","setUpdate","setToday","removeFormData","setFieldsValue","desc_etc","memo","buttonStyle","disabled","min","max","rows","SugarselectMenu","BloodsugarWrapper","Bloodsugar","Exercise","Foods","InsulinMenu","long","connectNulls","fill","x","y","countDate","d1","d2","d3","d4","cnt","newArray","getInsulin","getInsulinLong","enrollInsulin","getInsulinGraph","updateInsulin","date1","setDate1","date2","setDate2","date3","setDate3","date4","setDate4","arrData","setArrData","display","last_key","_type","지속성","unit","Option","insulinType","setinsulinType","insulinName","setinsulinName","insulinSpecies","setinsulinSpecies","etcDisable","setEtcDisable","iswhenDisable","setwhenDisable","handleOk","getinsulinType","enrollinsulinType","enrollInsulinType","useCallback","whenChange","getFieldValue","parseTime","_time","_name","getlongTypeData","alignItems","shape","alignSelf","icon","PlusOutlined","currentTarget","float","InsulinSelectMenu","InsulinWrapper","Insulin","Stressandhappy","Todayjob","MedicineEnroll","remember","values","onFinishFailed","errorInfo","TreatmentEnroll","Info","url","Chubang","TreatmentSelectMenu","TreatmentMenu","TreatmentWrapper","Treatment","Weight","path","exact","component","App","Route","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52825b60.chunk.js","sourcesContent":["import { createBrowserHistory as history } from 'history';\r\n\r\nexport default history();\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Input } from 'antd';\r\nimport './Whoareyou.scss';\r\nimport history from '../../pages/history';\r\n\r\nconst name = '박미옥';\r\n\r\nconst Whoareyou = () => {\r\n  const searchFunc = (value) => {\r\n    if (value === name) {\r\n      history.push('/secondpage');\r\n    } else {\r\n      history.push('/Error');\r\n    }\r\n  };\r\n  const { Search } = Input;\r\n  return (\r\n    <div className=\"Whoareyou\">\r\n      <img src=\"/images/banner/healthymiok_banner_1.jpg\" alt=\"인슐린\" />\r\n      <div className=\"Whoareyou2\">\r\n        <div className=\"title\">이름이 어떻게 되세요?</div>\r\n        <div className=\"yesno\">\r\n          <Search\r\n            placeholder=\"이름을 입력하세요\"\r\n            enterButton=\"확인\"\r\n            size=\"large\"\r\n            onSearch={searchFunc}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Whoareyou;\r\n","import React from 'react';\r\nimport './Firstpage.scss';\r\nimport Whoareyou from '../../organisms/whoareyou/Whoareyou';\r\n\r\nconst Firstpage = () => {\r\n  return (\r\n    <div className=\"FirstPage\">\r\n      <Whoareyou />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Firstpage;\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create({\r\n  baseURL: 'http://52.79.207.8:3001/api',\r\n});\r\n\r\nexport default client;\r\n","import React, { useEffect, useState } from 'react';\r\nimport history from '../../pages/history';\r\nimport { greeting } from '../../../utils/api/greeting';\r\n\r\nconst Welcome = () => {\r\n  const [message, setMessage] = useState('');\r\n  useEffect(() => {\r\n    try {\r\n      greeting().then((response) => {\r\n        setMessage(response.data.result[0].content);\r\n      });\r\n    } catch (error) {\r\n      setMessage('서버에서 데이터를 받아오지 못했어요..!');\r\n    }\r\n    const timer = setTimeout(() => {\r\n      history.push('/main');\r\n    }, 3000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n  return <div>{message}</div>;\r\n};\r\n\r\nexport default Welcome;\r\n","import client from './client';\r\n\r\n//greeting api 받아오기\r\nexport const greeting = () => client.get('/greeting');\r\n","import React from 'react';\r\nimport './Secondpage.scss';\r\nimport Welcome from '../../organisms/welcome/Welcome';\r\n\r\nconst Secondpage = () => {\r\n  return (\r\n    <div className=\"SecondPage\">\r\n      <Welcome />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Secondpage;\r\n","import React from 'react';\r\nimport './NotWelcome.scss';\r\nimport { Button } from 'antd';\r\nimport history from '../../pages/history';\r\n\r\nconst NotWelcome = () => {\r\n  return (\r\n    <div className=\"NotWelcome\">\r\n      <div>허가된 사용자가 아닙니다. 돌아가주세요..</div>\r\n      <Button\r\n        size=\"large\"\r\n        onClick={() => {\r\n          history.push('/');\r\n        }}\r\n      >\r\n        돌아가기\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotWelcome;\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport './Antmenu.scss';\r\n\r\nconst Antmenu = ({ func }) => {\r\n  return (\r\n    <div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n        <Menu.Item\r\n          key=\"0\"\r\n          onClick={() => {\r\n            func(0);\r\n          }}\r\n        >\r\n          홈\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"1\"\r\n          onClick={() => {\r\n            func(1);\r\n          }}\r\n        >\r\n          기록보기\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => {\r\n            func(2);\r\n          }}\r\n        >\r\n          그래프보기\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          onClick={() => {\r\n            func(3);\r\n          }}\r\n        >\r\n          달력\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nAntmenu.propTypes = {\r\n  func: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Antmenu;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport './Home.scss';\r\nimport history from '../../pages/history';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"Home\">\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/bloodSugar');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/diabetes.png\" alt=\"혈당\" />\r\n      </Button>\r\n\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/bloodPressure');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/blood_pressure.png\" alt=\"혈압\" />\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/weight');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/weight.png\" alt=\"체중\" />\r\n      </Button>\r\n\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/insulin');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/insuline.png\" alt=\"인슐린\" />\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/treatment');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/injectOrTreatment.png\" alt=\"투약 및 치료\" />\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/exercise');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/exercise.png\" alt=\"운동\" />\r\n      </Button>\r\n\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/foods');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/foodCare.png\" alt=\"식단\" />\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/stressAndHappy');\r\n        }}\r\n      >\r\n        <img\r\n          src=\"/images/menu/stressAndHappiness.png\"\r\n          alt=\"스트레스와행복\"\r\n          className=\"stress\"\r\n        />\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/todayJob');\r\n        }}\r\n      >\r\n        <img src=\"/images/menu/todayJob.png\" alt=\"식단\" />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Record = () => {\r\n  return <div>기록입니다.</div>;\r\n};\r\n\r\nexport default Record;\r\n","import React from 'react';\r\n\r\nconst Graph = () => {\r\n  return <div>그래프입니다.</div>;\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\n\r\nconst Calendar = () => {\r\n  return <div>달력입니다.</div>;\r\n};\r\n\r\nexport default Calendar;\r\n","import React from 'react';\r\n\r\nconst Error = () => {\r\n  return <div>에러입니다 다시 시도해주세요</div>;\r\n};\r\n\r\nexport default Error;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Home from '../organisms/home/Home';\r\nimport Record from '../organisms/record/Record';\r\nimport Graph from '../organisms/graph/Graph';\r\nimport Calendar from '../organisms/calendar/Calendar';\r\nimport Error from './Error/Error';\r\n\r\nconst SelectMenu = ({ menuIdx }) => {\r\n  if (menuIdx === 0) {\r\n    return <Home />;\r\n  }\r\n  if (menuIdx === 1) {\r\n    return <Record />;\r\n  }\r\n  if (menuIdx === 2) {\r\n    return <Graph />;\r\n  }\r\n  if (menuIdx === 3) {\r\n    return <Calendar />;\r\n  }\r\n  return <Error />;\r\n};\r\n\r\nSelectMenu.propTypes = {\r\n  menuIdx: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SelectMenu;\r\n","import React from 'react';\r\nimport './Footers.scss';\r\nimport { Modal, Button } from 'antd';\r\n\r\nconst Footers = () => {\r\n  const [state, setState] = React.useState(false);\r\n  const showModal = () => {\r\n    setState(true);\r\n  };\r\n  const handleOk = () => {\r\n    setState(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div className=\"question\">문의 : healthymiok@gmail.com</div>\r\n      <Modal\r\n        title=\"정보\"\r\n        visible={state}\r\n        onCancel={handleOk}\r\n        centered\r\n        okText=\"확인\"\r\n        footer={null}\r\n      >\r\n        주세인 :{' '}\r\n        <a\r\n          href=\"https://github.com/dodi258\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Github\r\n        </a>{' '}\r\n        <br />\r\n        허균 :{' '}\r\n        <a\r\n          href=\"https://github.com/Kyun2da\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Github\r\n        </a>{' '}\r\n        <br />\r\n        디자인 도움 : 채희원\r\n        <br />\r\n      </Modal>\r\n      <div>Backend : Sein Joo</div>\r\n      <div>Frontend : Kyun Heo</div>\r\n      <Button onClick={showModal} size=\"small\">\r\n        정보\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footers;\r\n","import React, { useState } from 'react';\r\nimport './Mainpage.scss';\r\nimport { Layout } from 'antd';\r\nimport Antmenu from '../../organisms/header/Antmenu';\r\nimport SelectMenu from '../SelectMenu';\r\nimport Footers from '../../organisms/Footer/Footers';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\nconst Mainpage = () => {\r\n  const [menuIdx, setMenuIdx] = useState(0);\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <Antmenu func={setMenuIdx} />\r\n      </Header>\r\n      <Content>\r\n        <SelectMenu menuIdx={menuIdx} />\r\n      </Content>\r\n      <Footer>\r\n        <Footers />\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Mainpage;\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\nconst BloodpressureMenu = (props) => {\r\n  const { func } = props;\r\n  return (\r\n    <div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n        <Menu.Item\r\n          key=\"0\"\r\n          onClick={() => {\r\n            func(0);\r\n          }}\r\n        >\r\n          혈압등록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"1\"\r\n          onClick={() => {\r\n            func(1);\r\n          }}\r\n        >\r\n          혈압기록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => {\r\n            func(2);\r\n          }}\r\n        >\r\n          그래프\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BloodpressureMenu;\r\n","import client from './client';\r\n\r\nconst secondURL = 'blood-pressure';\r\n\r\n//GET\r\n//혈압 api 받아오기\r\nexport const getBloodPressureDate = (startDate, endDate) =>\r\n  client.get(`${secondURL}/date`, {\r\n    params: {\r\n      startDate,\r\n      endDate,\r\n    },\r\n  });\r\n\r\n//POST\r\n//혈압 등록하기\r\nexport const enrollBloodPressure = (data) => client.post(`${secondURL}`, data);\r\n\r\nexport const getGraphBloodPressure = (data, startDate, endDate) =>\r\n  client.post(`${secondURL}/graph`, data, {\r\n    params: {\r\n      startDate,\r\n      endDate,\r\n    },\r\n  });\r\n//delete\r\n//혈압 삭제하기\r\nexport const deleteBloodPressure = (id) =>\r\n  client.delete(`${secondURL}/id/${id}`);\r\n","import React, { useState } from 'react';\r\nimport { Checkbox, DatePicker, Button } from 'antd';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { getGraphBloodPressure } from '../../../../../utils/api/bloodPressure';\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst Graph = () => {\r\n  const [high, setHigh] = useState(false);\r\n  const [low, setLow] = useState(false);\r\n  const [bpm, setBpm] = useState(false);\r\n  const [stTime, setstTime] = useState('');\r\n  const [edTime, setedTime] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const onChange = (value, dateString) => {\r\n    setstTime(dateString[0]);\r\n    setedTime(dateString[1]);\r\n  };\r\n  const onChangeHigh = (e) => {\r\n    console.log(e.target.checked);\r\n    setHigh(e.target.checked);\r\n  };\r\n  const onChangeLow = (e) => {\r\n    console.log(e.target.checked);\r\n    setLow(e.target.checked);\r\n  };\r\n  const onChangeBpm = (e) => {\r\n    console.log(e.target.checked);\r\n    setBpm(e.target.checked);\r\n  };\r\n\r\n  const getData = async () => {\r\n    console.log(stTime);\r\n    console.log(edTime);\r\n    const data = {\r\n      high,\r\n      low,\r\n      bpm,\r\n    };\r\n    const response = await getGraphBloodPressure(data, stTime, edTime);\r\n    setData(response.data.result);\r\n  };\r\n  return (\r\n    <div className=\"sugar-graph\">\r\n      <div className=\"dataform\">\r\n        <div className=\"when-table\">\r\n          <Checkbox onChange={onChangeHigh}>수축 (최고)</Checkbox>\r\n          <Checkbox onChange={onChangeLow}>이완 (최저)</Checkbox>\r\n          <Checkbox onChange={onChangeBpm}>심박수</Checkbox>\r\n        </div>\r\n        <div className=\"time-table\">\r\n          <RangePicker\r\n            format=\"YYYY-MM-DD\"\r\n            onChange={onChange}\r\n            style={{ margin: '0 2% 0 0', verticalAlign: 'middle' }}\r\n          />\r\n          <Button onClick={getData}>확인</Button>\r\n        </div>\r\n      </div>\r\n      <ResponsiveContainer width=\"80%\" height={600}>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"today\" name=\"날짜\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend iconSize={50} />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"high\"\r\n            stroke=\"#0000FF\"\r\n            activeDot={{ r: 8 }}\r\n            strokeWidth={4}\r\n            name=\"수축(최고)\"\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"low\"\r\n            stroke=\"#228B22\"\r\n            activeDot={{ r: 8 }}\r\n            strokeWidth={4}\r\n            name=\"이완(최저)\"\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"bpm\"\r\n            stroke=\"#FF4500\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"심박수\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","export const formatDate = (d) => {\r\n  const year = d._d.getFullYear();\r\n  let month = d._d.getMonth() + 1;\r\n  let date = d._d.getDate();\r\n  month = month < 10 ? `0${month}` : month;\r\n  date = date < 10 ? `0${date}` : date;\r\n  return `${year}-${month}-${date}`;\r\n};\r\n\r\nexport const formatTime = (d) => {\r\n  let hours = d._d.getHours();\r\n  let minute = d._d.getMinutes();\r\n  let seconds = d._d.getSeconds();\r\n\r\n  hours = hours < 10 ? `0${hours}` : hours;\r\n  minute = minute < 10 ? `0${minute}` : minute;\r\n  seconds = seconds < 10 ? `0${seconds}` : seconds;\r\n  return `${hours}:${minute}:${seconds}`;\r\n};\r\n","import React from 'react';\r\nimport { Table, Button, Popconfirm, DatePicker } from 'antd';\r\nimport moment from 'moment';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { formatDate } from '../../../../../utils/calculate/formatDate';\r\nimport {\r\n  setBloodPressureStatus,\r\n  StatusLight,\r\n} from '../../../../../utils/calculate/setBloodPressureStatus';\r\nimport {\r\n  deleteBloodPressure,\r\n  getBloodPressureDate,\r\n} from '../../../../../utils/api/bloodPressure';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst History = () => {\r\n  const dateFormat = 'YYYY/MM/DD';\r\n  const start_date = new Date(new Date().setMonth(new Date().getMonth() - 3));\r\n  const end_date = new Date();\r\n  const [dates, setDates] = React.useState([\r\n    moment(start_date, dateFormat),\r\n    moment(end_date, dateFormat),\r\n  ]);\r\n  const [dataSource, setdataSource] = React.useState([{}]);\r\n  const pageChange = (page, pageSize) => {\r\n    console.log(page, pageSize);\r\n  };\r\n  const handleDelete = async (id) => {\r\n    console.log(id);\r\n    const response = await deleteBloodPressure(id);\r\n    console.log(response);\r\n    toast.success('성공적으로 데이터를 삭제하였습니다!');\r\n    setdataSource(dataSource.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const getData = async () => {\r\n    const response = await getBloodPressureDate(\r\n      formatDate(dates[0]),\r\n      formatDate(dates[1]),\r\n    );\r\n    console.log(response);\r\n    response.data.result.map((it) => (it.today = it.today.substring(0, 10)));\r\n    toast.success('성공적으로 데이터를 가져왔습니다!');\r\n    setdataSource(response.data.result);\r\n  };\r\n\r\n  const renderContent = (value, row, index) => {\r\n    const obj = {\r\n      children: value,\r\n      props: {},\r\n    };\r\n    return obj;\r\n  };\r\n\r\n  const [paginationInfo, setPaginationInfo] = React.useState({\r\n    current: 1,\r\n    pageSize: 10,\r\n  });\r\n\r\n  const handleChange = (pagination) => {\r\n    setPaginationInfo(pagination);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: '날짜',\r\n      dataIndex: 'today',\r\n      render: (value, row, index) => {\r\n        const trueIndex =\r\n          index + paginationInfo.pageSize * (paginationInfo.current - 1);\r\n        const obj = {\r\n          children: value,\r\n          props: {},\r\n        };\r\n        if (index >= 1 && value === dataSource[trueIndex - 1].today) {\r\n          obj.props.rowSpan = 0;\r\n        } else {\r\n          for (\r\n            let i = 0;\r\n            trueIndex + i !== dataSource.length &&\r\n            value === dataSource[trueIndex + i].today;\r\n            i += 1\r\n          ) {\r\n            obj.props.rowSpan = i + 1;\r\n          }\r\n        }\r\n        return obj;\r\n      },\r\n    },\r\n    {\r\n      title: '수축',\r\n      dataIndex: 'value_high',\r\n      render: renderContent,\r\n    },\r\n    {\r\n      title: '이완',\r\n      dataIndex: 'value_low',\r\n      render: renderContent,\r\n    },\r\n    {\r\n      title: '심박수',\r\n      dataIndex: 'value_bpm',\r\n      render: (value, row, index) => {\r\n        const obj = {\r\n          children: value,\r\n          props: {},\r\n        };\r\n        return obj;\r\n      },\r\n    },\r\n    {\r\n      title: '평균',\r\n      dataIndex: 'avg',\r\n      render: (value, row, index) => {\r\n        const trueIndex =\r\n          index + paginationInfo.pageSize * (paginationInfo.current - 1);\r\n        const obj = {\r\n          children: value,\r\n          props: {},\r\n        };\r\n        let lowAvg = 0,\r\n          highAvg = 0,\r\n          bpmAvg = 0;\r\n        if (index >= 1 && row.today === dataSource[trueIndex - 1].today) {\r\n          obj.props.rowSpan = 0;\r\n        } else {\r\n          for (\r\n            let i = 0;\r\n            trueIndex + i !== dataSource.length &&\r\n            row.today === dataSource[trueIndex + i].today;\r\n            i += 1\r\n          ) {\r\n            highAvg += dataSource[trueIndex + i].value_high;\r\n            lowAvg += dataSource[trueIndex + i].value_low;\r\n            bpmAvg += dataSource[trueIndex + i].value_bpm;\r\n            obj.props.rowSpan = i + 1;\r\n          }\r\n        }\r\n        highAvg /= obj.props.rowSpan;\r\n        lowAvg /= obj.props.rowSpan;\r\n        bpmAvg /= obj.props.rowSpan;\r\n        if (highAvg && obj.props.rowSpan !== 0) {\r\n          obj.children = `수축: ${Math.round(highAvg)}, 이완: ${Math.round(\r\n            lowAvg,\r\n          )}, 심박수: ${Math.round(bpmAvg)}`;\r\n        }\r\n        return obj;\r\n      },\r\n    },\r\n    {\r\n      title: '진단',\r\n      dataIndex: 'Diagnosis',\r\n      render: (value, row, index) => {\r\n        const trueIndex =\r\n          index + paginationInfo.pageSize * (paginationInfo.current - 1);\r\n        const obj = {\r\n          children: value,\r\n          props: {},\r\n        };\r\n        let lowAvg = 0,\r\n          highAvg = 0;\r\n        if (index >= 1 && row.today === dataSource[trueIndex - 1].today) {\r\n          obj.props.rowSpan = 0;\r\n        } else {\r\n          for (\r\n            let i = 0;\r\n            trueIndex + i !== dataSource.length &&\r\n            row.today === dataSource[trueIndex + i].today;\r\n            i += 1\r\n          ) {\r\n            highAvg += dataSource[trueIndex + i].value_high;\r\n            lowAvg += dataSource[trueIndex + i].value_low;\r\n            obj.props.rowSpan = i + 1;\r\n          }\r\n          if (highAvg && obj.props.rowSpan !== 0) {\r\n            highAvg /= obj.props.rowSpan;\r\n            lowAvg /= obj.props.rowSpan;\r\n            const status = setBloodPressureStatus(\r\n              Math.round(highAvg),\r\n              Math.round(lowAvg),\r\n            );\r\n            console.log(status);\r\n            obj.children = StatusLight(status);\r\n          }\r\n        }\r\n\r\n        return obj;\r\n      },\r\n    },\r\n    {\r\n      title: '삭제',\r\n      dataIndex: 'delete',\r\n      render: (value, row, index) =>\r\n        dataSource.length >= 1 ? (\r\n          <Popconfirm\r\n            title=\"삭제하시겠습니까?\"\r\n            onConfirm={() => handleDelete(row.id)}\r\n          >\r\n            <Button>Delete</Button>\r\n          </Popconfirm>\r\n        ) : null,\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: 'center', margin: '3%' }}>\r\n        <RangePicker\r\n          size=\"large\"\r\n          defaultValue={[\r\n            moment(start_date, dateFormat),\r\n            moment(end_date, dateFormat),\r\n          ]}\r\n          onCalendarChange={(value) => {\r\n            setDates(value);\r\n          }}\r\n        />\r\n        <Button size=\"large\" onClick={getData}>\r\n          조회\r\n        </Button>\r\n      </div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n        bordered\r\n        pagination={{ onChange: { pageChange } }}\r\n        onChange={handleChange}\r\n        rowKey=\"id\"\r\n      ></Table>\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import { SmileTwoTone } from '@ant-design/icons';\r\nimport React from 'react';\r\n\r\nexport const setBloodPressureStatus = (value_high, value_low) => {\r\n  let high_status = 0;\r\n  let low_status = 0;\r\n  let _status = 0;\r\n\r\n  // 수축기 혈압 status\r\n  if (value_high < 70) high_status = 0;\r\n  else if (value_high >= 70 && value_high < 100) high_status = 1;\r\n  else if (value_high >= 100 && value_high < 140) high_status = 2;\r\n  else if (value_high >= 140 && value_high < 160) high_status = 3;\r\n  else if (value_high >= 160 && value_high < 200) high_status = 4;\r\n  else high_status = 5;\r\n\r\n  // 이완기 혈압 status\r\n  if (value_low < 40) low_status = 0;\r\n  else if (value_low >= 40 && value_low < 60) low_status = 1;\r\n  else if (value_low >= 60 && value_low < 90) low_status = 2;\r\n  else if (value_low >= 90 && value_low < 100) low_status = 3;\r\n  else if (value_low >= 100 && value_low < 120) low_status = 4;\r\n  else low_status = 5;\r\n\r\n  // high_status 와 low_status 값으로 혈압 _status 판단\r\n  if (low_status === 0 || high_status === 0) _status = 0;\r\n  else if (low_status === 5 || high_status === 5) _status = 5;\r\n  else if (low_status === 4 || high_status === 4) _status = 4;\r\n  else if (low_status === 3 || high_status === 3) _status = 3;\r\n  else if (low_status === 1 || high_status === 1) _status = 1;\r\n  else _status = 2;\r\n  return _status;\r\n};\r\n\r\n// 0: 보라\r\n// 1: 파랑\r\n// 2: 연두\r\n// 3: 노랑\r\n// 4: 주황\r\n// 5: 빨강\r\nexport const StatusLight = (value) => {\r\n  switch (value) {\r\n    case 0:\r\n      return (\r\n        <SmileTwoTone\r\n          twoToneColor=\"\t\r\n          #FF00FF\"\r\n        />\r\n      );\r\n    case 1:\r\n      return <SmileTwoTone twoToneColor=\"#0000FF\" />;\r\n    case 2:\r\n      return (\r\n        <SmileTwoTone\r\n          twoToneColor=\"\t\r\n          #52c41a\"\r\n        />\r\n      );\r\n    case 3:\r\n      return <SmileTwoTone twoToneColor=\"#FFFF00\" />;\r\n    case 4:\r\n      return <SmileTwoTone twoToneColor=\"#FFA500\" />;\r\n    case 5:\r\n      return (\r\n        <SmileTwoTone\r\n          twoToneColor=\"\t\r\n      #FF0000\"\r\n        />\r\n      );\r\n    default:\r\n      return;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { Form, DatePicker, TimePicker, InputNumber, Input, Button } from 'antd';\r\nimport './enroll.scss';\r\nimport moment from 'moment';\r\nimport {\r\n  formatDate,\r\n  formatTime,\r\n} from '../../../../../utils/calculate/formatDate';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { enrollBloodPressure } from '../../../../../utils/api/bloodPressure';\r\n\r\nconst { TextArea } = Input;\r\nconst enroll = () => {\r\n  const formItemLayout = {\r\n    labelCol: { span: 9 },\r\n    wrapperCol: { span: 13 },\r\n  };\r\n  const onFinish = async (data) => {\r\n    data.today = formatDate(data.today);\r\n    data.time = formatTime(data.time);\r\n    console.log(data);\r\n    const response = await enrollBloodPressure(data).catch((error) => {\r\n      toast.error('에러가 났어요!');\r\n    });\r\n    toast.success('등록에 성공하였습니다!');\r\n    console.log(response);\r\n  };\r\n  return (\r\n    <div className=\"bloodPressureEnroll\">\r\n      <Form\r\n        {...formItemLayout}\r\n        onFinish={onFinish}\r\n        initialValues={{\r\n          today: moment(new Date(), 'YYYY-MM-DD'),\r\n          time: moment(new Date(), 'HH:MM'),\r\n        }}\r\n      >\r\n        <Form.Item\r\n          wrapperCol={{ offset: 11 }}\r\n          name=\"today\"\r\n          rules={[{ required: true, message: '날짜를 선택해주세요' }]}\r\n        >\r\n          <DatePicker\r\n            size=\"large\"\r\n            style={{\r\n              margin: '5% 0px 0px 0px',\r\n              fontSize: '40px',\r\n            }}\r\n            className=\"datePic\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"시간\"\r\n          name=\"time\"\r\n          rules={[{ required: true, message: '시간을 선택해주세요' }]}\r\n        >\r\n          <TimePicker size=\"large\" format={'h:mm a'} />\r\n        </Form.Item>\r\n        <Form.Item label=\"혈압 수축\">\r\n          <Form.Item\r\n            name=\"value_high\"\r\n            noStyle\r\n            rules={[{ required: true, message: '혈압 수축을 선택해주세요' }]}\r\n          >\r\n            <InputNumber size=\"large\" />\r\n          </Form.Item>\r\n          <span className=\"ant-form-text\"> mmHg</span>\r\n        </Form.Item>\r\n        <Form.Item label=\"혈압 이완\">\r\n          <Form.Item\r\n            name=\"value_low\"\r\n            noStyle\r\n            rules={[{ required: true, message: '혈압 이완을 선택해주세요' }]}\r\n          >\r\n            <InputNumber size=\"large\" />\r\n          </Form.Item>\r\n          <span className=\"ant-form-text\"> mmHg</span>\r\n        </Form.Item>\r\n        <Form.Item label=\"심박수\">\r\n          <Form.Item\r\n            name=\"value_bpm\"\r\n            noStyle\r\n            rules={[{ required: true, message: '심박수를 선택해주세요' }]}\r\n          >\r\n            <InputNumber size=\"large\" />\r\n          </Form.Item>\r\n          <span className=\"ant-form-text\"> bpm</span>\r\n        </Form.Item>\r\n        <Form.Item label=\"메모\" wrapperCol={{ span: 13 }} name=\"memo\">\r\n          <TextArea\r\n            placeholder=\"쓰고싶은 말을 써주세요.\"\r\n            style={{ width: '60%', fontSize: '30px' }}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item colon={false} wrapperCol={{ span: 13, offset: 12 }}>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            style={{\r\n              margin: '5% 0px 0px 0px',\r\n              fontSize: '30px',\r\n              height: '100%',\r\n            }}\r\n          >\r\n            등록\r\n          </Button>\r\n        </Form.Item>\r\n        <ToastContainer\r\n          position=\"bottom-center\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default enroll;\r\n","import React from 'react';\r\nimport Graph from './graph/graph';\r\nimport History from './history/history';\r\nimport Enroll from './enroll/enroll';\r\n\r\nconst BloodpressureselectMenu = (props) => {\r\n  const { menuIdx } = props;\r\n\r\n  if (menuIdx === 0) {\r\n    return <Enroll />;\r\n  } else if (menuIdx === 1) {\r\n    return <History />;\r\n  } else if (menuIdx === 2) {\r\n    return <Graph />;\r\n  }\r\n};\r\n\r\nexport default BloodpressureselectMenu;\r\n","import React, { useState } from 'react';\r\nimport { Layout } from 'antd';\r\nimport Footers from '../../Footer/Footers';\r\nimport BloodpressureMenu from './BloodpressureMenu';\r\nimport BloodpressureselectMenu from './bloodpressureslectmenu';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\nconst BloodpressureWrapper = () => {\r\n  const [menuIdx, setMenuIdx] = useState(0);\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <BloodpressureMenu func={setMenuIdx} />\r\n      </Header>\r\n      <Layout>\r\n        <Content>\r\n          <BloodpressureselectMenu menuIdx={menuIdx} />\r\n        </Content>\r\n      </Layout>\r\n      <Footer>\r\n        <Footers />\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BloodpressureWrapper;\r\n","import React from 'react';\r\nimport BloodpressureWrapper from '../../organisms/home/bloodPressure/bloodpressure';\r\n\r\nconst Bloodpressure = () => {\r\n  return <BloodpressureWrapper />;\r\n};\r\n\r\nexport default Bloodpressure;\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Antmenu = ({ func }) => {\r\n  return (\r\n    <div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n        <Menu.Item\r\n          key=\"0\"\r\n          onClick={() => {\r\n            func(0);\r\n          }}\r\n        >\r\n          혈당등록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"1\"\r\n          onClick={() => {\r\n            func(1);\r\n          }}\r\n        >\r\n          혈당기록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => {\r\n            func(2);\r\n          }}\r\n        >\r\n          그래프\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nAntmenu.propTypes = {\r\n  func: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Antmenu;\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nconst CustomChart = ({ data, idx }) => {\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width=\"80%\" height={600}>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"today\" name=\"날짜\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend iconSize={50} />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={idx}\r\n            stroke=\"#000000\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"수치\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomChart;\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nconst CustomChart2 = ({ data, idx }) => {\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width=\"80%\" height={600}>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"today\" name=\"날짜\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend iconSize={50} />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={`아침 ${idx}`}\r\n            stroke=\"#FFEB3B\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"아침\"\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={`점심 ${idx}`}\r\n            stroke=\"#FF5722\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"점심\"\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={`저녁 ${idx}`}\r\n            stroke=\"#673AB7 \"\r\n            activeDot={{ r: 8 }}\r\n            name=\"저녁\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomChart2;\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nconst CustomChart3 = ({ data, idx }) => {\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width=\"80%\" height={600}>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"today\" name=\"날짜\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend iconSize={50} />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"_value\"\r\n            stroke=\"#000000\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"수치\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomChart3;\r\n","import client from './client';\r\n\r\nconst secondURL = 'blood-sugar';\r\n//GET\r\n//혈당 api 받아오기\r\nexport const getBloodSugar = (today, when) =>\r\n  client.get(`${secondURL}/record/`, { params: { today, when } });\r\n\r\nexport const getBloodSugarHistory = (startDate, endDate) =>\r\n  client.get(`${secondURL}/date/`, { params: { startDate, endDate } });\r\n\r\nexport const getBloodSugarGraph = (whenData, startDate, endDate) =>\r\n  client.get(`${secondURL}/when/${whenData}`, {\r\n    params: { startDate, endDate },\r\n  });\r\n//POST\r\n//혈당 등록하기\r\nexport const enrollBloodSugar = (data) => client.post(`${secondURL}`, data);\r\n\r\n//PUT\r\n//혈당 수정하기\r\nexport const updateBloodSugar = (id, data) =>\r\n  client.put(`${secondURL}/id/${id}`, data);\r\n","import React, { useState } from 'react';\r\nimport { Radio, DatePicker, Button } from 'antd';\r\nimport './graph.scss';\r\nimport CustomChart from './CustomChart';\r\nimport CustomChart2 from './CustomChart2';\r\nimport CustomChart3 from './CustomChart3';\r\nimport { getBloodSugarGraph } from '../../../../../utils/api/bloodSugar';\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst Graph = () => {\r\n  const [whenData, setWhenData] = useState('');\r\n  const [stTime, setstTime] = useState('');\r\n  const [edTime, setedTime] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const onChangeFunc = (e) => {\r\n    setWhenData(e.target.value);\r\n  };\r\n  const onChange = (value, dateString) => {\r\n    setstTime(dateString[0]);\r\n    setedTime(dateString[1]);\r\n  };\r\n  const project = () => {\r\n    switch (whenData) {\r\n      case '기상 직후':\r\n      case '취침 전':\r\n      case '새벽':\r\n        return <CustomChart data={data} idx={whenData} />;\r\n      case '식전':\r\n      case '식후':\r\n        return <CustomChart2 data={data} idx={whenData} />;\r\n      case '전체':\r\n        return <CustomChart3 data={data} idx={whenData} />;\r\n      default:\r\n        return (\r\n          <div style={{ textAlign: 'center', margin: '0 auto' }}>\r\n            데이터를 선택해주세요\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n  const getData = async () => {\r\n    const response = await getBloodSugarGraph(whenData, stTime, edTime);\r\n    setData(response.data.result);\r\n  };\r\n  return (\r\n    <div className=\"sugar-graph\">\r\n      <div className=\"dataform\">\r\n        <div className=\"when-table\">\r\n          <div>시기 </div>\r\n          <Radio.Group onChange={onChangeFunc} value={whenData}>\r\n            <Radio.Button value=\"기상 직후\">기상 직후</Radio.Button>\r\n            <Radio.Button value=\"취침 전\">취침 전</Radio.Button>\r\n            <Radio.Button value=\"새벽\">새벽</Radio.Button>\r\n            <Radio.Button value=\"식전\">식전</Radio.Button>\r\n            <Radio.Button value=\"식후\">식후</Radio.Button>\r\n            <Radio.Button value=\"전체\">전체</Radio.Button>\r\n          </Radio.Group>\r\n        </div>\r\n        <div className=\"time-table\">\r\n          <div>기간</div>\r\n          <RangePicker format=\"YYYY-MM-DD\" onChange={onChange} />\r\n        </div>\r\n        <Button onClick={getData}>확인</Button>\r\n      </div>\r\n      {project()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","/* eslint-disable no-underscore-dangle */\r\nimport React from 'react';\r\nimport { DatePicker, Table, Button } from 'antd';\r\nimport './history.scss';\r\nimport moment from 'moment';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { formatDate } from '../../../../../utils/calculate/formatDate';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getBloodSugarHistory } from '../../../../../utils/api/bloodSugar';\r\n\r\nconst { Column, ColumnGroup } = Table;\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst History = () => {\r\n  const dateFormat = 'YYYY/MM/DD';\r\n  const startDate = new Date(new Date().setMonth(new Date().getMonth() - 3));\r\n  const endDate = new Date();\r\n  const [dates, setDates] = React.useState([\r\n    moment(startDate, dateFormat),\r\n    moment(endDate, dateFormat),\r\n  ]);\r\n\r\n  const [dataSource, setdataSource] = React.useState([{}]);\r\n  const getData = async () => {\r\n    const response = await getBloodSugarHistory(\r\n      formatDate(dates[0]),\r\n      formatDate(dates[1]),\r\n    );\r\n    const arr = [];\r\n    response.data.result.map((item) => {\r\n      const idx = arr.findIndex((i) => i.date === item.today.substring(0, 10));\r\n      if (idx === -1) {\r\n        const temp = {\r\n          key: item.today.substring(0, 10),\r\n          date: item.today.substring(0, 10),\r\n          [item._when]: item._value,\r\n        };\r\n        arr.push(temp);\r\n      } else {\r\n        arr[idx][item._when] = item._value;\r\n      }\r\n      return 0;\r\n    });\r\n    setdataSource(arr);\r\n    toast.success('성공적으로 데이터를 가져왔습니다!');\r\n  };\r\n  React.useEffect(() => {\r\n    getData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: 'center', margin: '3%' }}>\r\n        <RangePicker\r\n          size=\"large\"\r\n          defaultValue={[\r\n            moment(startDate, dateFormat),\r\n            moment(endDate, dateFormat),\r\n          ]}\r\n          onCalendarChange={(value) => {\r\n            setDates(value);\r\n          }}\r\n        />\r\n        <Button size=\"large\" onClick={getData}>\r\n          조회\r\n        </Button>\r\n      </div>\r\n      <Table\r\n        dataSource={dataSource}\r\n        bordered\r\n        pagination={{ position: 'bottomCenter' }}\r\n      >\r\n        <Column title=\"날짜\" dataIndex=\"date\" key=\"date\" />\r\n        <Column title=\"기상 직후\" dataIndex=\"기상 직후\" key=\"기상 직후\" />\r\n        <ColumnGroup title=\"아침\">\r\n          <Column title=\"식전\" dataIndex=\"아침 식전\" key=\"아침 식전\" />\r\n          <Column title=\"식후2시간\" dataIndex=\"아침 식후\" key=\"아침 식후\" />\r\n        </ColumnGroup>\r\n        <ColumnGroup title=\"점심\">\r\n          <Column title=\"식전\" dataIndex=\"점심 식전\" key=\"점심 식전\" />\r\n          <Column title=\"식후2시간\" dataIndex=\"점심 식후\" key=\"점심 식후\" />\r\n        </ColumnGroup>\r\n        <ColumnGroup title=\"저녁\">\r\n          <Column title=\"식전\" dataIndex=\"저녁 식전\" key=\"저녁 식전\" />\r\n          <Column title=\"식후2시간\" dataIndex=\"저녁 식후\" key=\"저녁 식후\" />\r\n        </ColumnGroup>\r\n        <Column title=\"취침전\" dataIndex=\"취침 전\" key=\"취침 전\" />\r\n        <Column title=\"새벽\" dataIndex=\"새벽\" key=\"새벽\" />\r\n        <Column title=\"기타\" dataIndex=\"기타\" key=\"기타\" />\r\n      </Table>\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React from 'react';\r\nimport { Button, DatePicker, Form, Radio, InputNumber, Input } from 'antd';\r\nimport './enroll.scss';\r\nimport moment from 'moment';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { formatDate } from '../../../../../utils/calculate/formatDate';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n  getBloodSugar,\r\n  enrollBloodSugar,\r\n  updateBloodSugar,\r\n} from '../../../../../utils/api/bloodSugar';\r\n\r\nconst Enroll = () => {\r\n  const dateFormat = 'YYYY/MM/DD';\r\n  const formItemLayout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 14 },\r\n  };\r\n  const [form] = Form.useForm();\r\n  const [dataID, setDataID] = React.useState();\r\n  const [isDisable, setDisable] = React.useState(true);\r\n  const [isUpdate, setUpdate] = React.useState(false);\r\n  const [today, setToday] = React.useState(\r\n    formatDate(moment(new Date(), dateFormat)),\r\n  );\r\n\r\n  const removeFormData = () => {\r\n    form.setFieldsValue({\r\n      desc_etc: null,\r\n      value: null,\r\n      memo: null,\r\n    });\r\n  };\r\n  const onChange = async (e) => {\r\n    if (e.target.value === '기타') {\r\n      setDisable(false);\r\n    } else {\r\n      setDisable(true);\r\n    }\r\n    const response = await getBloodSugar(today, e.target.value);\r\n    if (response.status === 200) {\r\n      setUpdate(true);\r\n      setDataID(response.data.result[0].id);\r\n      form.setFieldsValue({\r\n        desc_etc: response.data.result[0].desc_etc,\r\n        value: response.data.result[0]._value,\r\n        memo: response.data.result[0].memo,\r\n      });\r\n    } else if (response.status === 204) {\r\n      setUpdate(false);\r\n      removeFormData();\r\n    } else {\r\n      console.log('에러코드 발생');\r\n    }\r\n  };\r\n\r\n  const onChangeToday = (date, dateString) => {\r\n    console.log(dateString);\r\n    setToday(dateString);\r\n    removeFormData();\r\n    setUpdate(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  const onFinish = async (data) => {\r\n    data.today = formatDate(data.today);\r\n    console.log(data);\r\n    if (isUpdate) {\r\n      const response = await updateBloodSugar(dataID, data).catch(() => {\r\n        toast.error('에러가 났어요!');\r\n      });\r\n      toast.success('수정에 성공하였습니다!');\r\n      console.log(response);\r\n    } else {\r\n      const response = await enrollBloodSugar(data);\r\n      removeFormData();\r\n      toast.success('등록에 성공하였습니다!');\r\n      console.log(response);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"enroll\">\r\n      <Form\r\n        colon={false}\r\n        size=\"large\"\r\n        {...formItemLayout}\r\n        form={form}\r\n        onFinish={onFinish}\r\n        initialValues={{\r\n          today: moment(new Date(), dateFormat),\r\n          when: null,\r\n          desc_etc: null,\r\n          value: 0,\r\n          memo: null,\r\n        }}\r\n      >\r\n        <Form.Item name=\"today\" wrapperCol={{ span: 12, offset: 11 }}>\r\n          <DatePicker\r\n            onChange={onChangeToday}\r\n            format={dateFormat}\r\n            value={moment(new Date(), dateFormat)}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"when\"\r\n          label=\"시기\"\r\n          rules={[{ required: true, message: '측정 시기를 선택해주세요' }]}\r\n        >\r\n          <Radio.Group onChange={onChange} buttonStyle=\"solid\">\r\n            <Radio.Button value=\"기상 직후\">기상 직후</Radio.Button>\r\n            <Radio.Button value=\"아침 식전\">아침 식전</Radio.Button>\r\n            <Radio.Button value=\"점심 식전\">점심 식전</Radio.Button>\r\n            <Radio.Button value=\"저녁 식전\">저녁 식전</Radio.Button>\r\n            <Radio.Button value=\"기타\">기타</Radio.Button>\r\n            <br />\r\n            <Radio.Button value=\"아침 식후\">아침 식후</Radio.Button>\r\n            <Radio.Button value=\"점심 식후\">점심 식후</Radio.Button>\r\n            <Radio.Button value=\"저녁 식후\">저녁 식후</Radio.Button>\r\n            <Radio.Button value=\"취침 전\">취침 전</Radio.Button>\r\n            <Radio.Button value=\"새벽\">새벽</Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"desc_etc\" label=\"기타내용\">\r\n          <Input\r\n            placeholder=\"기타내용을 선택시 입력합니다\"\r\n            disabled={isDisable}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"value\"\r\n          label=\"수치\"\r\n          rules={[{ required: true, message: '수치를 선택해주세요' }]}\r\n        >\r\n          <InputNumber min={0} max={800} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"memo\" label=\"메모\">\r\n          <Input.TextArea\r\n            rows={10}\r\n            placeholder=\"쓰고 싶은 말이 있으면 적어주세요~\"\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item colon={false} wrapperCol={{ span: 12, offset: 12 }}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            {isUpdate ? '수정' : '등록'}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Enroll;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Graph from './graph/graph';\r\nimport History from './history/history';\r\nimport Enroll from './enroll/enroll';\r\nimport Error from '../../../pages/Error/Error';\r\n\r\nconst SugarselectMenu = ({ menuIdx }) => {\r\n  if (menuIdx === 0) {\r\n    return <Enroll />;\r\n  }\r\n  if (menuIdx === 1) {\r\n    return <History />;\r\n  }\r\n  if (menuIdx === 2) {\r\n    return <Graph />;\r\n  }\r\n  return <Error />;\r\n};\r\n\r\nSugarselectMenu.propTypes = {\r\n  menuIdx: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SugarselectMenu;\r\n","import React, { useState } from 'react';\r\nimport { Layout } from 'antd';\r\nimport BloodSugarMenu from './Bloodsugarmenu';\r\nimport SugarselectMenu from './sugarselectmenu';\r\nimport Footers from '../../Footer/Footers';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\nconst BloodsugarWrapper = () => {\r\n  const [menuIdx, setMenuIdx] = useState(0);\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <BloodSugarMenu func={setMenuIdx} />\r\n      </Header>\r\n      <Layout>\r\n        <Content>\r\n          <SugarselectMenu menuIdx={menuIdx} />\r\n        </Content>\r\n      </Layout>\r\n      <Footer>\r\n        <Footers />\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BloodsugarWrapper;\r\n","import React from 'react';\r\nimport BloodsugarWrapper from '../../organisms/home/bloodSugar/bloodsugar';\r\n\r\nconst Bloodsugar = () => {\r\n  return (\r\n    <div style={{ height: '100%' }}>\r\n      <BloodsugarWrapper />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bloodsugar;\r\n","import React from 'react';\r\n\r\nconst Exercise = () => {\r\n  return <div>운동페이지입니다.</div>;\r\n};\r\n\r\nexport default Exercise;\r\n","import React from 'react';\r\n\r\nconst Foods = () => {\r\n  return <div>음식페이지입니다.</div>;\r\n};\r\n\r\nexport default Foods;\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\nconst InsulinMenu = (props) => {\r\n  const { func } = props;\r\n  return (\r\n    <div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n        <Menu.Item\r\n          key=\"0\"\r\n          onClick={() => {\r\n            func(0);\r\n          }}\r\n        >\r\n          인슐린 투여\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"1\"\r\n          onClick={() => {\r\n            func(1);\r\n          }}\r\n        >\r\n          인슐린 기록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => {\r\n            func(2);\r\n          }}\r\n        >\r\n          인슐린 & 혈당 그래프\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsulinMenu;\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceDot,\r\n  Label,\r\n} from 'recharts';\r\nconst CustomChart = ({ data, idx, long }) => {\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width=\"50%\" height={600}>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 20,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"when\" name=\"날짜\"></XAxis>\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"blood_sugar\"\r\n            stroke=\"#FF4500\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"혈당\"\r\n            connectNulls={true}\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"short\"\r\n            stroke=\"#0000FF\"\r\n            activeDot={{ r: 8 }}\r\n            name=\"속효성\"\r\n            connectNulls={true}\r\n          />\r\n          {long && (\r\n            <ReferenceDot\r\n              r={5}\r\n              fill=\"red\"\r\n              stroke=\"none\"\r\n              x=\"아침 식전\"\r\n              y={long}\r\n              label={<Label value={`지속성 : ${long}`} position=\"top\" />}\r\n            />\r\n          )}\r\n          <Legend iconSize={50} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomChart;\r\n","export const countDate = (d1, d2, d3, d4) => {\r\n  let cnt = 0;\r\n  if (d1 !== '') {\r\n    cnt++;\r\n  }\r\n  if (d2 !== '') {\r\n    cnt++;\r\n  }\r\n  if (d3 !== '') {\r\n    cnt++;\r\n  }\r\n  if (d4 !== '') {\r\n    cnt++;\r\n  }\r\n  return cnt;\r\n};\r\n\r\nexport const newArray = (d1, d2, d3, d4) => {\r\n  const arr = [];\r\n  if (d1 !== '') {\r\n    arr.push(d1);\r\n  }\r\n  if (d2 !== '') {\r\n    arr.push(d2);\r\n  }\r\n  if (d3 !== '') {\r\n    arr.push(d3);\r\n  }\r\n  if (d4 !== '') {\r\n    arr.push(d4);\r\n  }\r\n  return arr;\r\n};\r\n","import client from './client';\r\n\r\nconst typeURL = 'type-insulin';\r\n\r\nconst insulinURL = 'insulin';\r\n//GET\r\nexport const getLongtypeInsulin = () => client.get(`${typeURL}/long`);\r\n\r\nexport const getShorttypeInsulin = () => client.get(`${typeURL}/short`);\r\n\r\nexport const getInsulin = (today, when) =>\r\n  client.get(`${insulinURL}/record/short`, {\r\n    params: {\r\n      today,\r\n      when,\r\n    },\r\n  });\r\n\r\nexport const getInsulinLong = (today) =>\r\n  client.get(`${insulinURL}/record/long`, {\r\n    params: {\r\n      today,\r\n    },\r\n  });\r\n\r\nexport const getInsulinDate = (startDate, endDate) =>\r\n  client.get(`${insulinURL}/date`, {\r\n    params: {\r\n      startDate,\r\n      endDate,\r\n    },\r\n  });\r\n//POST\r\nexport const enrollInsulinType = (startDate, endDate) =>\r\n  client.post(`${typeURL}/date`, {\r\n    params: {\r\n      startDate,\r\n      endDate,\r\n    },\r\n  });\r\n\r\nexport const enrollInsulin = (data) => client.post(`${insulinURL}`, data);\r\n\r\nexport const getInsulinGraph = (data) =>\r\n  client.post(`${insulinURL}/graph`, data);\r\n//PUT\r\nexport const updateInsulin = (id, data) =>\r\n  client.put(`${insulinURL}/id/${id}`, data);\r\n","import React, { useState } from 'react';\r\nimport { DatePicker, Button } from 'antd';\r\nimport CustomChart from './CustomChart';\r\nimport { countDate, newArray } from '../../../../../utils/calculate/countDate';\r\nimport { getInsulinGraph } from '../../../../../utils/api/insulin';\r\n\r\nconst Graph = () => {\r\n  const [date1, setDate1] = useState('');\r\n  const [date2, setDate2] = useState('');\r\n  const [date3, setDate3] = useState('');\r\n  const [date4, setDate4] = useState('');\r\n  const [arrData, setArrData] = useState();\r\n\r\n  const onChange1 = (date, dateString) => {\r\n    setDate1(dateString);\r\n  };\r\n  const onChange2 = (date, dateString) => {\r\n    setDate2(dateString);\r\n  };\r\n  const onChange3 = (date, dateString) => {\r\n    setDate3(dateString);\r\n  };\r\n  const onChange4 = (date, dateString) => {\r\n    setDate4(dateString);\r\n  };\r\n  const getData = async () => {\r\n    const cnt = countDate(date1, date2, date3, date4);\r\n    const data = {\r\n      dates: newArray(date1, date2, date3, date4),\r\n      cnt: cnt,\r\n    };\r\n    const response = await getInsulinGraph(data);\r\n    console.log(response);\r\n    setArrData(response.data.result);\r\n  };\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          textAlign: 'center',\r\n          margin: '0 40%',\r\n        }}\r\n      >\r\n        <DatePicker onChange={onChange1} style={{ margin: '2% 0' }} />\r\n        <DatePicker onChange={onChange2} style={{ margin: '2% 0' }} />\r\n        <DatePicker onChange={onChange3} style={{ margin: '2% 0' }} />\r\n        <DatePicker onChange={onChange4} style={{ margin: '2% 0' }} />\r\n        <Button onClick={getData} style={{ width: '50%', margin: '0 25%' }}>\r\n          확인\r\n        </Button>\r\n      </div>\r\n      <div style={{ display: 'flex' }}>\r\n        <CustomChart\r\n          data={arrData?.[0].data}\r\n          idx={1}\r\n          long={arrData?.[0].long}\r\n        />\r\n        <CustomChart\r\n          data={arrData?.[1].data}\r\n          idx={2}\r\n          long={arrData?.[1].long}\r\n        />\r\n      </div>\r\n      <div style={{ display: 'flex' }}>\r\n        <CustomChart\r\n          data={arrData?.[2].data}\r\n          idx={3}\r\n          long={arrData?.[2].long}\r\n        />\r\n        <CustomChart\r\n          data={arrData?.[3].data}\r\n          idx={4}\r\n          long={arrData?.[3].long}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport { Table, Button, DatePicker } from 'antd';\r\nimport moment from 'moment';\r\nimport { formatDate } from '../../../../../utils/calculate/formatDate.js';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { getInsulinDate } from '../../../../../utils/api/insulin.js';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst History = () => {\r\n  const [dataSource, setdataSource] = React.useState([]);\r\n  const dateFormat = 'YYYY/MM/DD';\r\n  const start_date = new Date(new Date().setMonth(new Date().getMonth() - 3));\r\n  const end_date = new Date();\r\n  const [dates, setDates] = React.useState([\r\n    moment(start_date, dateFormat),\r\n    moment(end_date, dateFormat),\r\n  ]);\r\n  const getData = async () => {\r\n    const response = await getInsulinDate(\r\n      formatDate(dates[0]),\r\n      formatDate(dates[1]),\r\n    );\r\n    let arr = [];\r\n    let last_key = 0;\r\n    console.log(response);\r\n    response.data.result.map((item) => {\r\n      const idx = arr.findIndex((i) => i.date === item.today.substring(0, 10));\r\n      if (idx === -1) {\r\n        if (item._type === '지속성') {\r\n          const temp = {\r\n            key: ++last_key,\r\n            date: item.today.substring(0, 10),\r\n            지속성: item.unit,\r\n          };\r\n          arr.push(temp);\r\n        } else {\r\n          const temp = {\r\n            key: ++last_key,\r\n            date: item.today.substring(0, 10),\r\n            [item._when]: item.unit,\r\n          };\r\n          arr.push(temp);\r\n        }\r\n      } else {\r\n        if (item._type === '지속성') {\r\n          arr[idx]['지속성'] = item.unit;\r\n        } else {\r\n          arr[idx][item._when] = item.unit;\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n    setdataSource(arr);\r\n    toast.success('성공적으로 데이터를 가져왔습니다!');\r\n  };\r\n  React.useEffect(() => {\r\n    getData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    console.log(dataSource);\r\n  }, [dataSource]);\r\n  const renderContent = (value, row, index) => {\r\n    const obj = {\r\n      children: value,\r\n      props: {},\r\n    };\r\n    return obj;\r\n  };\r\n  const columns = [\r\n    {\r\n      title: '날짜',\r\n      dataIndex: 'date',\r\n      render: renderContent,\r\n    },\r\n    {\r\n      title: '지속성',\r\n      dataIndex: '지속성',\r\n      render: renderContent,\r\n    },\r\n    {\r\n      title: '속효성',\r\n      children: [\r\n        {\r\n          title: '아침',\r\n          dataIndex: '아침 식전',\r\n          key: '아침 식전',\r\n          width: 200,\r\n        },\r\n        {\r\n          title: '점심',\r\n          dataIndex: '점심 식전',\r\n          key: '점심 식전',\r\n        },\r\n        {\r\n          title: '저녁',\r\n          dataIndex: '저녁 식전',\r\n          key: '저녁 식전',\r\n        },\r\n        {\r\n          title: '기타1',\r\n          dataIndex: '기타1',\r\n          key: '기타1',\r\n        },\r\n        {\r\n          title: '기타2',\r\n          dataIndex: '기타2',\r\n          key: '기타2',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: '횟수',\r\n      dataIndex: 'Diagnosis',\r\n      render: renderContent,\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: 'center', margin: '3%' }}>\r\n        <RangePicker\r\n          size=\"large\"\r\n          defaultValue={[\r\n            moment(start_date, dateFormat),\r\n            moment(end_date, dateFormat),\r\n          ]}\r\n          onCalendarChange={(value) => {\r\n            setDates(value);\r\n          }}\r\n        />\r\n        <Button size=\"large\" onClick={getData}>\r\n          조회\r\n        </Button>\r\n      </div>\r\n      <Table dataSource={dataSource} columns={columns} bordered></Table>\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Form,\r\n  DatePicker,\r\n  InputNumber,\r\n  Input,\r\n  Button,\r\n  Select,\r\n  Modal,\r\n  Radio,\r\n  TimePicker,\r\n} from 'antd';\r\nimport './enroll.scss';\r\nimport moment from 'moment';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport {\r\n  formatDate,\r\n  formatTime,\r\n} from '../../../../../utils/calculate/formatDate';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport {\r\n  getLongtypeInsulin,\r\n  getShorttypeInsulin,\r\n  enrollInsulin,\r\n  getInsulin,\r\n  updateInsulin,\r\n  enrollInsulinType,\r\n  getInsulinLong,\r\n} from '../../../../../utils/api/insulin';\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\nconst Enroll = () => {\r\n  const formItemLayout = {\r\n    labelCol: { span: 9 },\r\n    wrapperCol: { span: 13 },\r\n  };\r\n  const [form] = Form.useForm();\r\n  const [state, setState] = useState(false);\r\n  const [insulinType, setinsulinType] = useState([]);\r\n  const [insulinName, setinsulinName] = useState('');\r\n  const [insulinSpecies, setinsulinSpecies] = useState('지속성');\r\n  const [isDisable, setDisable] = useState(true);\r\n  const [etcDisable, setEtcDisable] = useState(true);\r\n  const [today, setToday] = React.useState(\r\n    formatDate(moment(new Date(), 'YYYY-MM-DD')),\r\n  );\r\n  const [isUpdate, setUpdate] = React.useState(false);\r\n  const [dataID, setDataID] = React.useState();\r\n  const [iswhenDisable, setwhenDisable] = React.useState(true);\r\n\r\n  const showModal = () => {\r\n    setState(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setState(false);\r\n  };\r\n\r\n  const getinsulinType = async (data) => {\r\n    if (data === '지속성') {\r\n      const response = await getLongtypeInsulin();\r\n      console.log(response);\r\n      setinsulinType(response.data.result);\r\n    } else {\r\n      const response = await getShorttypeInsulin();\r\n      console.log(response);\r\n      setinsulinType(response.data.result);\r\n    }\r\n  };\r\n\r\n  const enrollinsulinType = async () => {\r\n    console.log(insulinName);\r\n    console.log(insulinSpecies);\r\n    handleOk();\r\n    const data = {\r\n      name: insulinName,\r\n      type: insulinSpecies,\r\n    };\r\n    const response = await enrollInsulinType(data);\r\n    console.log(response);\r\n  };\r\n\r\n  const onChangeType = (e) => {\r\n    setinsulinSpecies(e.target.value);\r\n  };\r\n\r\n  const removeFormData = React.useCallback(\r\n    (data) => {\r\n      form.setFieldsValue({\r\n        name: null,\r\n        unit: null,\r\n        desc_etc: null,\r\n        time: null,\r\n        when: data ?? null,\r\n        memo: null,\r\n      });\r\n    },\r\n    [form],\r\n  );\r\n\r\n  const onChangeToday = (date, dateString) => {\r\n    console.log(dateString);\r\n    setToday(dateString);\r\n    removeFormData();\r\n    setUpdate(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  const onChangeSelectFunc = (e) => {\r\n    setwhenDisable(false);\r\n  };\r\n\r\n  const whenChange = async (e) => {\r\n    if (e.target.value === '기타1' || e.target.value === '기타2') {\r\n      setEtcDisable(false);\r\n    } else {\r\n      setEtcDisable(true);\r\n    }\r\n    if (form.getFieldValue('type') === '속효성') {\r\n      const response = await getInsulin(today, e.target.value);\r\n      console.log(response);\r\n      if (response.status === 200) {\r\n        setUpdate(true);\r\n        setDataID(response.data.result[0].id);\r\n        const parseTime = response.data.result[0]._time.substring(0, 5);\r\n        console.log(parseTime);\r\n        form.setFieldsValue({\r\n          desc_etc: response.data.result[0].desc_etc,\r\n          time: moment(parseTime, 'HH:mm'),\r\n          unit: response.data.result[0].unit,\r\n          name: response.data.result[0]._name,\r\n          memo: response.data.result[0].memo,\r\n        });\r\n      } else if (response.status === 204) {\r\n        setUpdate(false);\r\n        removeFormData(e.target.value);\r\n      } else {\r\n        console.log('에러코드 발생');\r\n      }\r\n    } else {\r\n      console.log('지속성입니다.');\r\n    }\r\n  };\r\n\r\n  const onFinish = async (data) => {\r\n    data.today = formatDate(data.today);\r\n    data.time = formatTime(data.time);\r\n    console.log(data);\r\n    if (isUpdate) {\r\n      const response = await updateInsulin(dataID, data).catch((error) => {\r\n        toast.error('에러가 났어요!');\r\n      });\r\n      toast.success('수정에 성공하였습니다!');\r\n      console.log(response);\r\n    } else {\r\n      const response = await enrollInsulin(data);\r\n      removeFormData();\r\n      toast.success('등록에 성공하였습니다!');\r\n      console.log(response);\r\n    }\r\n  };\r\n\r\n  const getlongTypeData = React.useCallback(async () => {\r\n    const response = await getInsulinLong(today);\r\n    console.log(response);\r\n    if (response.status === 200) {\r\n      setUpdate(true);\r\n      setDataID(response.data.result[0].id);\r\n      setwhenDisable(false);\r\n      const parseTime = response.data.result[0]._time.substring(0, 5);\r\n      console.log(parseTime);\r\n      form.setFieldsValue({\r\n        desc_etc: response.data.result[0].desc_etc,\r\n        time: moment(parseTime, 'HH:mm'),\r\n        unit: response.data.result[0].unit,\r\n        name: response.data.result[0]._name,\r\n        memo: response.data.result[0].memo,\r\n        when: response.data.result[0]._when,\r\n      });\r\n    } else if (response.status === 204) {\r\n      setUpdate(false);\r\n      removeFormData();\r\n    } else {\r\n      console.log('에러코드 발생');\r\n    }\r\n  }, [form, removeFormData, today]);\r\n\r\n  const onChangeSelectType = () => {\r\n    removeFormData();\r\n    getinsulinType(form.getFieldValue('type'));\r\n    if (form.getFieldValue('type') === '지속성') {\r\n      getlongTypeData();\r\n    } else {\r\n      setUpdate(false);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!isDisable && insulinName === '') {\r\n      setDisable(true);\r\n    }\r\n    if (isDisable && insulinName !== '') {\r\n      setDisable(false);\r\n    }\r\n  }, [insulinName, isDisable]);\r\n  return (\r\n    <div className=\"bloodPressureEnroll\">\r\n      <Form\r\n        form={form}\r\n        onFinish={onFinish}\r\n        {...formItemLayout}\r\n        initialValues={{\r\n          today: moment(new Date(), 'YYYY-MM-DD'),\r\n          type: null,\r\n          name: null,\r\n          unit: null,\r\n          when: null,\r\n          desc_etc: null,\r\n          time: moment(new Date(), 'HH:mm'),\r\n          memo: null,\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"today\"\r\n          wrapperCol={{ offset: 11 }}\r\n          rules={[{ required: true, message: '날짜를 선택해주세요' }]}\r\n        >\r\n          <DatePicker\r\n            size=\"large\"\r\n            style={{\r\n              margin: '5% 0px 0px 0px',\r\n              fontSize: '40px',\r\n            }}\r\n            className=\"datePic\"\r\n            onChange={onChangeToday}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"type\"\r\n          label=\"타입\"\r\n          rules={[{ required: true, message: '타입을 선택해주세요' }]}\r\n        >\r\n          <Select\r\n            style={{ width: '50%', margin: '0px' }}\r\n            onChange={onChangeSelectType}\r\n          >\r\n            <Option value=\"지속성\" key=\"지속성\">\r\n              지속성\r\n            </Option>\r\n            <Option value=\"속효성\" key=\"속효성\">\r\n              속효성\r\n            </Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"종류\"\r\n          rules={[{ required: true, message: '종류를 선택해주세요' }]}\r\n        >\r\n          <div style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n            <Form.Item name=\"name\" noStyle>\r\n              <Select\r\n                style={{ width: '50%', margin: '0px' }}\r\n                onChange={onChangeSelectFunc}\r\n              >\r\n                {insulinType.map((it) => {\r\n                  return (\r\n                    <Option value={it._name} key={it._name}>\r\n                      {it._name}\r\n                    </Option>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              onClick={showModal}\r\n              style={{\r\n                display: 'block',\r\n                margin: '0 0 0 8px',\r\n                alignSelf: 'center',\r\n              }}\r\n              icon={<PlusOutlined />}\r\n            />\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"when\"\r\n          label=\"시기\"\r\n          rules={[{ required: true, message: '시기를 선택해주세요' }]}\r\n        >\r\n          <Radio.Group onChange={whenChange} disabled={iswhenDisable}>\r\n            <Radio value=\"아침 식전\">아침식전</Radio>\r\n            <Radio value=\"점심 식전\">점심식전</Radio>\r\n            <Radio value=\"저녁 식전\">저녁식전</Radio>\r\n            <Radio value=\"기타1\">기타1</Radio>\r\n            <Radio value=\"기타2\">기타2</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item name=\"desc_etc\" label=\"기타 내용\">\r\n          <Input\r\n            placeholder=\"기타1 또는 기타2 선택시 입력\"\r\n            style={{ width: '50%' }}\r\n            disabled={etcDisable}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"time\"\r\n          label=\"시간\"\r\n          rules={[{ required: true, message: '시간을 선택해주세요' }]}\r\n        >\r\n          <TimePicker size=\"large\" format={'h:mm a'} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"unit\"\r\n          label=\"단위\"\r\n          rules={[{ required: true, message: '단위를 선택해주세요' }]}\r\n        >\r\n          <InputNumber size=\"large\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"memo\" label=\"메모\" wrapperCol={{ span: 13 }}>\r\n          <TextArea\r\n            placeholder=\"쓰고싶은 말을 써주세요.\"\r\n            style={{ width: '60%', fontSize: '30px' }}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item colon={false} wrapperCol={{ span: 13, offset: 12 }}>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            style={{\r\n              margin: '5% 0px 0px 0px',\r\n              fontSize: '30px',\r\n              height: '100%',\r\n            }}\r\n          >\r\n            {isUpdate ? '수정' : '등록'}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <Modal\r\n        title=\"인슐린 등록\"\r\n        visible={state}\r\n        onCancel={handleOk}\r\n        centered\r\n        okText={'확인'}\r\n        footer={null}\r\n      >\r\n        <p>인슐린 이름</p>\r\n        <Input\r\n          placeholder=\"인슐린 이름을 입력하세요.\"\r\n          onChange={(e) => {\r\n            setinsulinName(e.currentTarget.value);\r\n          }}\r\n        ></Input>\r\n        <p>인슐린 종류</p>\r\n        <Radio.Group\r\n          defaultValue={'1'}\r\n          onChange={onChangeType}\r\n          value={insulinSpecies}\r\n        >\r\n          <Radio value=\"지속성\">지속성</Radio>\r\n          <Radio value=\"속효성\">속효성</Radio>\r\n        </Radio.Group>\r\n        <Button\r\n          style={{ display: 'flex', float: 'right' }}\r\n          onClick={enrollinsulinType}\r\n          disabled={isDisable}\r\n        >\r\n          등록하기\r\n        </Button>\r\n      </Modal>\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Enroll;\r\n","import React from 'react';\r\nimport Graph from './graph/graph';\r\nimport History from './history/history';\r\nimport Enroll from './enroll/enroll';\r\n\r\nconst InsulinSelectMenu = (props) => {\r\n  const { menuIdx } = props;\r\n\r\n  if (menuIdx === 0) {\r\n    return <Enroll />;\r\n  } else if (menuIdx === 1) {\r\n    return <History />;\r\n  } else if (menuIdx === 2) {\r\n    return <Graph />;\r\n  }\r\n};\r\n\r\nexport default InsulinSelectMenu;\r\n","import React, { useState } from 'react';\r\nimport InsulinMenu from './insulinMenu';\r\nimport InsulinSelectMenu from './insulinSelectMenu';\r\nimport { Layout } from 'antd';\r\nimport Footers from '../../Footer/Footers';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nconst InsulinWrapper = () => {\r\n  const [menuIdx, setMenuIdx] = useState(0);\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <InsulinMenu func={setMenuIdx} />\r\n      </Header>\r\n      <Layout>\r\n        <Content>\r\n          <InsulinSelectMenu menuIdx={menuIdx} />\r\n        </Content>\r\n      </Layout>\r\n      <Footer>\r\n        <Footers />\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default InsulinWrapper;\r\n","import React from 'react';\r\nimport InsulinWrapper from '../../organisms/home/insulin/insulin';\r\n\r\nconst Insulin = () => {\r\n  return <InsulinWrapper />;\r\n};\r\n\r\nexport default Insulin;\r\n","import React from 'react';\r\n\r\nconst Stressandhappy = () => {\r\n  return <div>스트레스와행복지수페이지입니다.</div>;\r\n};\r\n\r\nexport default Stressandhappy;\r\n","import React from 'react';\r\n\r\nconst Todayjob = () => {\r\n  return <div>오늘의 일 페이지 입니다.</div>;\r\n};\r\n\r\nexport default Todayjob;\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Radio,\r\n  Button,\r\n  Input,\r\n  DatePicker,\r\n  TimePicker,\r\n  Select,\r\n  Modal,\r\n  InputNumber,\r\n} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport './MedicineEnroll.scss';\r\n\r\nconst MedicineEnroll = () => {\r\n  const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const [state, setState] = React.useState(false);\r\n  return (\r\n    <div className=\"MedicineEnroll\">\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item label=\"날짜\" name=\"날짜\">\r\n          <DatePicker />\r\n        </Form.Item>\r\n        <Form.Item label=\"시간\">\r\n          <TimePicker />\r\n        </Form.Item>\r\n        <Form.Item label=\"시기\" name=\"password\">\r\n          <Radio.Group defaultValue=\"a\" buttonStyle=\"solid\">\r\n            <Radio.Button value=\"a\">아침</Radio.Button>\r\n            <Radio.Button value=\"b\">점심</Radio.Button>\r\n            <Radio.Button value=\"c\">저녁</Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item label=\"종류 추가\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            style={{ margin: '0 2rem 0 0' }}\r\n            onClick={() => {\r\n              setState(true);\r\n            }}\r\n          />\r\n          <Select style={{ width: '40%' }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"단위\">\r\n          <InputNumber />\r\n        </Form.Item>\r\n        <Form.Item label=\"메모\">\r\n          <Input.TextArea style={{ width: '50%' }} />\r\n        </Form.Item>\r\n      </Form>\r\n      <Modal\r\n        title=\"약 등록하기\"\r\n        visible={state}\r\n        centered\r\n        onCancel={() => {\r\n          setState(false);\r\n        }}\r\n        okText={'확인'}\r\n        footer={null}\r\n      >\r\n        <p>약 이름</p>\r\n        <Input placeholder=\"약 이름을 입력하세요.\"></Input>\r\n        <p>제조 업체</p>\r\n        <Input placeholder=\"제조업체를 입력하세요.\"></Input>\r\n        <p>용량</p>\r\n        <InputNumber />\r\n        <Radio.Group defaultValue=\"a\" buttonStyle=\"solid\">\r\n          <Radio.Button value=\"a\">mg</Radio.Button>\r\n          <Radio.Button value=\"b\">g</Radio.Button>\r\n        </Radio.Group>\r\n        <p>메모</p>\r\n        <Input.TextArea style={{ width: '50%' }} />\r\n        <p>약 관련 링크</p>\r\n        <Input placeholder=\"약 관련 링크를 입력하세요.\"></Input>\r\n        <Button style={{ display: 'flex', margin: '1rem 0' }}>등록하기</Button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MedicineEnroll;\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Button,\r\n  Input,\r\n  DatePicker,\r\n  TimePicker,\r\n  Select,\r\n  Modal,\r\n} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport './TreatmentEnroll.scss';\r\n\r\nconst TreatmentEnroll = () => {\r\n  const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const [state, setState] = React.useState(false);\r\n  return (\r\n    <div className=\"TreatmentEnroll\">\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item label=\"날짜\" name=\"날짜\">\r\n          <DatePicker />\r\n        </Form.Item>\r\n        <Form.Item label=\"시간\">\r\n          <TimePicker />\r\n        </Form.Item>\r\n        <Form.Item label=\"종류 추가\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            style={{ margin: '0 2rem 0 0' }}\r\n            icon={<PlusOutlined />}\r\n            onClick={() => {\r\n              setState(true);\r\n            }}\r\n          />\r\n          <Select style={{ width: '50%' }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"메모\">\r\n          <Input.TextArea style={{ width: '50%' }} />\r\n        </Form.Item>\r\n      </Form>\r\n      <Modal\r\n        title=\"새로운 처치 등록\"\r\n        visible={state}\r\n        centered\r\n        onCancel={() => {\r\n          setState(false);\r\n        }}\r\n        okText={'확인'}\r\n        footer={null}\r\n      >\r\n        <p>명칭</p>\r\n        <Input placeholder=\"명칭을 입력하세요\" />\r\n        <Button style={{ display: 'flex', float: 'right' }}>등록하기</Button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreatmentEnroll;\r\n","import React from 'react';\r\nimport { DatePicker, Table } from 'antd';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst columns = [\r\n  {\r\n    title: '날짜',\r\n    dataIndex: 'name',\r\n  },\r\n  {\r\n    title: '분류',\r\n    dataIndex: 'age',\r\n  },\r\n  {\r\n    title: '이름',\r\n    dataIndex: 'address',\r\n  },\r\n  {\r\n    title: '단위',\r\n    dataIndex: 'address',\r\n  },\r\n  {\r\n    title: '시기',\r\n    dataIndex: 'address',\r\n  },\r\n];\r\n\r\nconst History = () => {\r\n  return (\r\n    <div\r\n      className=\"treatmentHistory\"\r\n      style={{ textAlign: 'center', margin: '3%' }}\r\n    >\r\n      <RangePicker style={{ margin: '3% 0' }} />\r\n      <Table columns={columns} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React from 'react';\r\nimport Iframe from 'react-iframe';\r\nimport { Select } from 'antd';\r\n\r\nconst Info = () => {\r\n  return (\r\n    <div style={{ textAlign: 'center', margin: '3%' }}>\r\n      <Select style={{ width: '200px', margin: '3% 0' }} />\r\n      <Iframe\r\n        url=\"http://www.health.kr/searchDrug/result_drug.asp?drug_cd=A11A4290B0015\"\r\n        width=\"100%\"\r\n        height=\"500px\"\r\n      ></Iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport { Form, Radio, Button, Input, DatePicker } from 'antd';\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst Chubang = () => {\r\n  const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const [, setState] = React.useState(false);\r\n  return (\r\n    <div className=\"TreatmentEnroll\">\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item label=\"약 이름\" name=\"약 이름\">\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"기간\">\r\n          <RangePicker />\r\n          <Button\r\n            type=\"primary\"\r\n            style={{ margin: '0 2rem 0 0' }}\r\n            onClick={() => {\r\n              setState(true);\r\n            }}\r\n          >\r\n            종료\r\n          </Button>\r\n        </Form.Item>\r\n        <Form.Item label=\"주기\">\r\n          <Radio.Group buttonStyle=\"solid\">\r\n            <Radio.Button value=\"a\">매일</Radio.Button>\r\n            <Radio.Button value=\"a\">특정 요일</Radio.Button>\r\n            <Radio.Button value=\"a\">특정 날짜</Radio.Button>\r\n            <Radio.Button value=\"a\">월</Radio.Button>\r\n            <Radio.Button value=\"a\">화</Radio.Button>\r\n            <Radio.Button value=\"a\">수</Radio.Button>\r\n            <Radio.Button value=\"a\">목</Radio.Button>\r\n            <Radio.Button value=\"b\">금</Radio.Button>\r\n            <Radio.Button value=\"b\">토</Radio.Button>\r\n            <Radio.Button value=\"b\">일</Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item label=\"횟수\">\r\n          <Radio.Group buttonStyle=\"solid\">\r\n            <Radio.Button value=\"a\">1회</Radio.Button>\r\n            <Radio.Button value=\"a\">2회</Radio.Button>\r\n            <Radio.Button value=\"a\">3회</Radio.Button>\r\n            <Radio.Button value=\"a\">4회</Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item label=\" \">\r\n          <Radio.Group buttonStyle=\"solid\">\r\n            <Radio.Button value=\"a\">기상직후</Radio.Button>\r\n            <Radio.Button value=\"a\">아침식전</Radio.Button>\r\n            <Radio.Button value=\"a\">점심식전</Radio.Button>\r\n            <Radio.Button value=\"a\">저녁식전</Radio.Button>\r\n            <Radio.Button value=\"a\">취침전</Radio.Button>\r\n            <Radio.Button value=\"a\">아침식사</Radio.Button>\r\n            <Radio.Button value=\"a\">점심식사</Radio.Button>\r\n            <Radio.Button value=\"a\">저녁식사</Radio.Button>\r\n            <Radio.Button value=\"a\">기타</Radio.Button>\r\n            <Radio.Button value=\"a\">아침식후</Radio.Button>\r\n            <Radio.Button value=\"a\">점심식후</Radio.Button>\r\n            <Radio.Button value=\"a\">저녁식후</Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item label=\"메모\">\r\n          <Input.TextArea style={{ width: '50%' }} />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chubang;\r\n","import React from 'react';\r\nimport MedicineEnroll from './medicineEnroll/MedicineEnroll';\r\nimport TreatmentEnroll from './treatmentEnroll/TreatmentEnroll';\r\nimport History from './history/History';\r\nimport Info from './info/Info';\r\nimport Chubang from './chubangEnroll/Chubang';\r\n\r\nconst TreatmentSelectMenu = (props) => {\r\n  const { menuIdx } = props;\r\n\r\n  if (menuIdx === 0) {\r\n    return <MedicineEnroll />;\r\n  } else if (menuIdx === 1) {\r\n    return <TreatmentEnroll />;\r\n  } else if (menuIdx === 2) {\r\n    return <History />;\r\n  } else if (menuIdx === 3) {\r\n    return <Chubang />;\r\n  } else {\r\n    return <Info />;\r\n  }\r\n};\r\n\r\nexport default TreatmentSelectMenu;\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\nconst TreatmentMenu = (props) => {\r\n  const { func } = props;\r\n  return (\r\n    <div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n        <Menu.Item\r\n          key=\"0\"\r\n          onClick={() => {\r\n            func(0);\r\n          }}\r\n        >\r\n          투약 등록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"1\"\r\n          onClick={() => {\r\n            func(1);\r\n          }}\r\n        >\r\n          처치 등록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"2\"\r\n          onClick={() => {\r\n            func(2);\r\n          }}\r\n        >\r\n          투약 / 처치기록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          onClick={() => {\r\n            func(3);\r\n          }}\r\n        >\r\n          처방전 등록\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"4\"\r\n          onClick={() => {\r\n            func(4);\r\n          }}\r\n        >\r\n          약 정보\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreatmentMenu;\r\n","import React, { useState } from 'react';\r\nimport { Layout } from 'antd';\r\nimport Footers from '../../Footer/Footers';\r\nimport TreatmentSelectMenu from './TreatmentSelectMenu';\r\nimport TreatmentMenu from './TreatmentMenu';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nconst TreatmentWrapper = () => {\r\n  const [menuIdx, setMenuIdx] = useState(0);\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <TreatmentMenu func={setMenuIdx} />\r\n      </Header>\r\n      <Layout>\r\n        <Content>\r\n          <TreatmentSelectMenu menuIdx={menuIdx} />\r\n        </Content>\r\n      </Layout>\r\n      <Footer>\r\n        <Footers />\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TreatmentWrapper;\r\n","import React from 'react';\r\nimport TreatmentWrapper from '../../organisms/home/treatment/Treatment';\r\n\r\nconst Treatment = () => {\r\n  return <TreatmentWrapper />;\r\n};\r\n\r\nexport default Treatment;\r\n","import React from 'react';\r\n\r\nconst Weight = () => {\r\n  return <div>체중페이지입니다.</div>;\r\n};\r\n\r\nexport default Weight;\r\n","import React from 'react';\r\nimport { Router, Switch, Route } from 'react-router-dom';\r\nimport Firstpage from './firstpage/Firstpage';\r\nimport Secondpage from './secondpage/Secondpage';\r\nimport history from './history';\r\nimport NotWelcome from '../organisms/notwelcome/NotWelcome';\r\nimport Mainpage from './mainpage/Mainpage';\r\nimport {\r\n  Bloodsugar,\r\n  Bloodpressure,\r\n  Weight,\r\n  Insulin,\r\n  Treatment,\r\n  Exercise,\r\n  Foods,\r\n  Stressandhappy,\r\n  Todayjob,\r\n} from './buttonMenu';\r\n\r\nexport default () => (\r\n  <Router history={history}>\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Firstpage} />\r\n      <Route path=\"/secondpage\" component={Secondpage} />\r\n      <Route path=\"/error\" component={NotWelcome} />\r\n      <Route path=\"/main\" component={Mainpage} />\r\n      <Route path=\"/bloodSugar\" component={Bloodsugar} />\r\n      <Route path=\"/bloodPressure\" component={Bloodpressure} />\r\n      <Route path=\"/weight\" component={Weight} />\r\n      <Route path=\"/insulin\" component={Insulin} />\r\n      <Route path=\"/treatment\" component={Treatment} />\r\n      <Route path=\"/exercise\" component={Exercise} />\r\n      <Route path=\"/foods\" component={Foods} />\r\n      <Route path=\"/stressAndHappy\" component={Stressandhappy} />\r\n      <Route path=\"/todayJob\" component={Todayjob} />\r\n    </Switch>\r\n  </Router>\r\n);\r\n","import React from 'react';\r\nimport './App.less';\r\nimport Routes from './components/pages/Route';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}